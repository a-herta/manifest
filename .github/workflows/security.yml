name: 🔒 Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 🔍 代码安全扫描
  code-security:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: 📦 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep

      - name: 🔒 Run Bandit security scan
        run: |
          echo "🔍 Running Bandit security analysis..."
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt -o bandit-report.txt || true
          
          echo "📊 Bandit scan completed"
          if [ -f bandit-report.txt ]; then
            echo "### 🔒 Bandit Security Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -50 bandit-report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🛡️ Run Safety dependency check
        run: |
          echo "🔍 Running Safety dependency scan..."
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true
          
          echo "📊 Safety scan completed"
          if [ -f safety-report.txt ]; then
            echo "### 🛡️ Safety Dependency Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat safety-report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔎 Run Semgrep SAST scan
        id: semgrep
        run: |
          echo "🔍 Running Semgrep SAST analysis..."
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/ --output=semgrep-report.txt || true
          
          echo "📊 Semgrep scan completed"
          if [ -f semgrep-report.txt ]; then
            echo "### 🔎 Semgrep SAST Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -50 semgrep-report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            *-report.json
            *-report.txt
          retention-days: 30

  # 🔐 依赖漏洞扫描
  dependency-scan:
    name: 🔐 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit

      - name: 🔍 Run pip-audit
        run: |
          echo "🔍 Running pip-audit vulnerability scan..."
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx --output=pip-audit-sbom.json || true
          pip-audit || true

      - name: 📊 Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ github.run_number }}
          path: |
            pip-audit-report.json
            pip-audit-sbom.json

  # 🔧 配置安全检查
  config-security:
    name: 🔧 Configuration Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for secrets in code
        run: |
          echo "🔍 Scanning for potential secrets..."
          
          # Check for common secret patterns
          echo "### 🔐 Secret Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # API keys
          if grep -r -i "api[_-]key\|apikey" --include="*.py" --include="*.yml" --include="*.yaml" src/ .github/ || true; then
            echo "⚠️ Found potential API key references" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Tokens
          if grep -r -i "token\|secret" --include="*.py" --include="*.yml" --include="*.yaml" src/ .github/ || true; then
            echo "⚠️ Found potential token/secret references" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Passwords
          if grep -r -i "password\|passwd" --include="*.py" --include="*.yml" --include="*.yaml" src/ .github/ || true; then
            echo "⚠️ Found potential password references" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ Secret scan completed" >> $GITHUB_STEP_SUMMARY

      - name: 🔧 Check file permissions
        run: |
          echo "🔍 Checking file permissions..."
          find . -type f -perm /111 -name "*.py" | head -10 || true
          echo "✅ Permission check completed"

      - name: 🔒 Check for hardcoded IPs/URLs
        run: |
          echo "🔍 Scanning for hardcoded IPs and URLs..."
          grep -r -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" --include="*.py" src/ || true
          echo "✅ IP/URL scan completed"

  # 📋 生成安全报告
  security-report:
    name: 📋 Security Report Summary
    needs: [code-security, dependency-scan, config-security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📥 Download security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results/

      - name: 📋 Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Security Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Config Security | ${{ needs.config-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Count total files scanned
          TOTAL_PY_FILES=$(find . -name "*.py" | wc -l)
          echo "- **Python files scanned:** $TOTAL_PY_FILES" >> $GITHUB_STEP_SUMMARY
          
          # Check if any reports exist
          if [ -d "security-results" ]; then
            echo "- **Security reports generated:** $(find security-results/ -name "*.json" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security reports in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any high-severity findings" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies if vulnerabilities are found" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider adding security checks to pre-commit hooks" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🔒 Security Scan Results
            
            | Check | Status |
            |-------|--------|
            | Code Security | ${{ needs.code-security.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            | Dependency Scan | ${{ needs.dependency-scan.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            | Config Security | ${{ needs.config-security.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            
            📊 **Scan completed on:** ${new Date().toISOString()}
            
            Please review the security reports in the workflow artifacts if any issues were found.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });