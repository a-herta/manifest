name: 📊 Extract Repository Info

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to analyze'
        required: false
        default: 'main'
        type: string
      output_format:
        description: 'Output format'
        required: true
        default: 'markdown'
        type: choice
        options:
        - markdown
        - json
        - csv
  schedule:
    # Run weekly on Sunday at 02:00 UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: "3.11"

jobs:
  extract-info:
    name: 📊 Extract Repository Information
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || 'main' }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Verify project structure
        run: |
          echo "📁 Project structure:"
          find src/ -name "*.py" | head -10
          python -c "from src.steam_manifest.tools.extractor import extract_repository_info; print('✅ Extractor import successful')"

      - name: 📊 Run extraction
        id: extract
        run: |
          echo "🔄 Starting repository information extraction..."
          python extract.py
          
          # Check if extraction was successful
          if [ $? -eq 0 ]; then
            echo "✅ Extraction completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Extraction failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📋 Generate extraction report
        if: steps.extract.outputs.success == 'true'
        run: |
          echo "## 📊 Repository Extraction Report" > extraction_report.md
          echo "" >> extraction_report.md
          echo "**Extraction Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> extraction_report.md
          echo "**Branch:** ${{ github.event.inputs.target_branch || 'main' }}" >> extraction_report.md
          echo "**Commit:** ${{ github.sha }}" >> extraction_report.md
          echo "" >> extraction_report.md
          
          # Add basic statistics
          echo "### 📈 Statistics" >> extraction_report.md
          echo "- **Total Python files:** $(find src/ -name '*.py' | wc -l)" >> extraction_report.md
          echo "- **Total lines of code:** $(find src/ -name '*.py' -exec wc -l {} + | tail -1 | awk '{print $1}')" >> extraction_report.md
          echo "" >> extraction_report.md
          
          echo "### 🔧 Extraction Process" >> extraction_report.md
          echo "The extraction process analyzed the repository structure and generated relevant statistics." >> extraction_report.md
          echo "" >> extraction_report.md
          echo "For detailed results, check the extraction output above." >> extraction_report.md

      - name: 📊 Upload extraction artifacts
        if: steps.extract.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: extraction-results-${{ github.run_number }}
          path: |
            extraction_report.md
            *.json
            *.csv
            *.log
          retention-days: 30

      - name: 💬 Create issue comment (if triggered by issue)
        if: github.event.issue.number && steps.extract.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('extraction_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🤖 **Automated Repository Extraction Complete**\n\n${report}`
            });

      - name: 📈 Update repository insights (scheduled runs)
        if: github.event_name == 'schedule' && steps.extract.outputs.success == 'true'
        run: |
          # Create or update insights file
          mkdir -p .github/insights
          cp extraction_report.md .github/insights/latest_extraction.md
          
          # Commit if there are changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --quiet; then
            git add .github/insights/
            git commit -m "📊 Update repository insights [automated]"
            git push
          else
            echo "No changes to commit"
          fi

      - name: 📊 Job summary
        if: always()
        run: |
          echo "## 📊 Extraction Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ steps.extract.outputs.success == 'true' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ github.event.inputs.target_branch || 'main' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Run Number | ${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f extraction_report.md ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Extraction Report" >> $GITHUB_STEP_SUMMARY
            cat extraction_report.md >> $GITHUB_STEP_SUMMARY
          fi
