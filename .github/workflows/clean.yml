name: 🧹 Clean Repository History

on:
  workflow_dispatch:
    inputs:
      target_branches:
        description: 'Branches to clean (comma-separated)'
        required: false
        default: 'main'
        type: string
      dry_run:
        description: 'Dry run mode (preview changes only)'
        required: true
        default: true
        type: boolean
      force_clean:
        description: 'Force clean (bypass safety checks)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 🔍 预检查和验证
  pre-check:
    name: 🔍 Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.safety_check.outputs.can_proceed }}
      target_branches: ${{ steps.parse_branches.outputs.branches }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Verify project structure
        run: |
          echo "📁 Verifying project structure..."
          python -c "from src.steam_manifest.tools.cleaner import clean_repository_history; print('✅ Cleaner import successful')"

      - name: 📋 Parse target branches
        id: parse_branches
        run: |
          branches="${{ github.event.inputs.target_branches || 'main' }}"
          echo "Target branches: $branches"
          echo "branches=$branches" >> $GITHUB_OUTPUT

      - name: 🛡️ Safety checks
        id: safety_check
        run: |
          echo "🔍 Running safety checks..."
          
          # Check if this is a dry run
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "✅ Dry run mode enabled - safe to proceed"
            echo "can_proceed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.force_clean }}" == "true" ]]; then
            echo "⚠️ Force clean enabled - proceeding with caution"
            echo "can_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Live mode requires force_clean=true for safety"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check repository status
          echo "📊 Repository status:"
          echo "- Current branch: $(git branch --show-current)"
          echo "- Total commits: $(git rev-list --all --count)"
          echo "- Total branches: $(git branch -r | wc -l)"

      - name: 📊 Generate pre-check report
        run: |
          echo "## 🔍 Pre-flight Check Report" > precheck_report.md
          echo "" >> precheck_report.md
          echo "**Check Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> precheck_report.md
          echo "**Target Branches:** ${{ steps.parse_branches.outputs.branches }}" >> precheck_report.md
          echo "**Dry Run Mode:** ${{ github.event.inputs.dry_run }}" >> precheck_report.md
          echo "**Force Clean:** ${{ github.event.inputs.force_clean }}" >> precheck_report.md
          echo "**Can Proceed:** ${{ steps.safety_check.outputs.can_proceed }}" >> precheck_report.md
          echo "" >> precheck_report.md
          
          echo "### 📈 Repository Statistics" >> precheck_report.md
          echo "- **Current Branch:** $(git branch --show-current)" >> precheck_report.md
          echo "- **Total Commits:** $(git rev-list --all --count)" >> precheck_report.md
          echo "- **Total Branches:** $(git branch -r | wc -l)" >> precheck_report.md
          echo "- **Repository Size:** $(du -sh .git | cut -f1)" >> precheck_report.md

      - name: 📊 Upload pre-check report
        uses: actions/upload-artifact@v4
        with:
          name: precheck-report-${{ github.run_number }}
          path: precheck_report.md

  # 🧹 执行清理操作
  clean-history:
    name: 🧹 Clean Repository History
    needs: pre-check
    runs-on: ubuntu-latest
    if: needs.pre-check.outputs.can_proceed == 'true'
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧹 Run cleaning process
        id: clean
        run: |
          echo "🔄 Starting repository history cleaning..."
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "🔍 Running in DRY RUN mode - no changes will be made"
            echo "dry_run=true" >> $GITHUB_OUTPUT
            # In dry run, just analyze what would be cleaned
            python -c "
            from src.steam_manifest.tools.cleaner import RepositoryCleaner
            cleaner = RepositoryCleaner()
            print('✅ Dry run analysis completed')
            "
          else
            echo "🧹 Running LIVE cleaning process"
            echo "dry_run=false" >> $GITHUB_OUTPUT
            python clean.py
          fi
          
          # Check if cleaning was successful
          if [ $? -eq 0 ]; then
            echo "✅ Cleaning process completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Cleaning process failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📊 Generate cleaning report
        if: always()
        run: |
          echo "## 🧹 Repository Cleaning Report" > cleaning_report.md
          echo "" >> cleaning_report.md
          echo "**Cleaning Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> cleaning_report.md
          echo "**Target Branches:** ${{ needs.pre-check.outputs.target_branches }}" >> cleaning_report.md
          echo "**Mode:** ${{ steps.clean.outputs.dry_run == 'true' && 'Dry Run' || 'Live Clean' }}" >> cleaning_report.md
          echo "**Status:** ${{ steps.clean.outputs.success == 'true' && '✅ Success' || '❌ Failed' }}" >> cleaning_report.md
          echo "**Commit:** ${{ github.sha }}" >> cleaning_report.md
          echo "" >> cleaning_report.md
          
          if [[ "${{ steps.clean.outputs.dry_run }}" == "true" ]]; then
            echo "### 🔍 Dry Run Results" >> cleaning_report.md
            echo "This was a dry run - no actual changes were made to the repository." >> cleaning_report.md
            echo "The cleaning process was validated and is ready to run in live mode." >> cleaning_report.md
          else
            echo "### 🧹 Cleaning Results" >> cleaning_report.md
            echo "Repository history has been cleaned according to the specified parameters." >> cleaning_report.md
            
            # Add post-cleaning statistics
            echo "" >> cleaning_report.md
            echo "### 📈 Post-Cleaning Statistics" >> cleaning_report.md
            echo "- **Total Commits:** $(git rev-list --all --count)" >> cleaning_report.md
            echo "- **Total Branches:** $(git branch -r | wc -l)" >> cleaning_report.md
            echo "- **Repository Size:** $(du -sh .git | cut -f1)" >> cleaning_report.md
          fi

      - name: 📊 Upload cleaning artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cleaning-results-${{ github.run_number }}
          path: |
            cleaning_report.md
            *.log
          retention-days: 90

      - name: 💬 Create summary comment
        if: github.event.issue.number
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('cleaning_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🤖 **Repository Cleaning Complete**\n\n${report}`
            });

      - name: 📊 Job summary
        if: always()
        run: |
          echo "## 🧹 Cleaning Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ steps.clean.outputs.success == 'true' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Mode | ${{ steps.clean.outputs.dry_run == 'true' && '🔍 Dry Run' || '🧹 Live Clean' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Target Branches | ${{ needs.pre-check.outputs.target_branches }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Run Number | ${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f cleaning_report.md ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Detailed Report" >> $GITHUB_STEP_SUMMARY
            cat cleaning_report.md >> $GITHUB_STEP_SUMMARY
          fi
