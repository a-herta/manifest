name: 🧪 CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🐍 Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ "3.11", "3.12", "3.13" ]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📦 Add Poetry to PATH (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "$env:USERPROFILE\.poetry\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 📋 Install dependencies
        run: poetry install

      - name: 🎨 Code formatting check (black)
        run: poetry run black --check --diff src/

      - name: 📚 Import sorting check (isort)
        run: poetry run isort --check-only --diff src/

      - name: 🔍 Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          poetry run flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          poetry run flake8 src/ --count --exit-zero --max-complexity=15 --max-line-length=110 --statistics

      - name: 🚀 Test CLI installation
        run: |
          poetry run steam-manifest --help

      - name: ✅ Test basic functionality
        run: |
          poetry run python -c "import src.steam_manifest; print('🎉 Package imports successfully')"